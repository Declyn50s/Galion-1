// src/lib/bareme.ts
// Barème LLHPS 2016 : lookup exact dans la table officielle.

export type BaremeColumn = 1 | 2 | 3 | 4 | 5; // 1=1/2 pers, 2=1 enf, 3=2 enf, 4=3 enf, 5=≥4
export type Range = { min: number; max: number };
export type Row = { limit: number; caps: [number, number, number, number, number] };

/** 0 enfant → col 1 ; 1 → 2 ; 2 → 3 ; 3 → 4 ; ≥4 → 5 */
export function columnFromChildrenCount(minors: number): BaremeColumn {
  const n = Math.max(0, Math.floor(minors || 0));
  const col = n === 0 ? 1 : Math.min(n, 4) + 1;
  return col as BaremeColumn;
}

// ———————————————————————————————————————————————————————————
// Table brute (tabulations \t). Col1..Col5 = plafonds RDU par colonne.
// ———————————————————————————————————————————————————————————
const TABLE_TSV = `Loyer	Col1	Col2	Col3	Col4	Col5
200	29000	32000	35000	38000	41000
260	29350	32350	35350	38350	41350
270	29700	32700	35700	38700	41700
280	30050	33050	36050	39050	42050
290	30400	33400	36400	39400	42400
300	30750	33750	36750	39750	42750
310	31100	34100	37100	40100	43100
320	31450	34450	37450	40450	43450
330	31800	34800	37800	40800	43800
340	32150	35150	38150	41150	44150
350	32500	35500	38500	41500	44500
360	32850	35850	38850	41850	44850
370	33200	36200	39200	42200	45200
380	33550	36550	39550	42550	45550
390	33900	36900	39900	42900	45900
400	34250	37250	40250	43250	46250
410	34600	37600	40600	43600	46600
420	34950	37950	40950	43950	46950
430	35300	38300	41300	44300	47300
440	35650	38650	41650	44650	47650
450	36000	39000	42000	45000	48000
460	36350	39350	42350	45350	48350
470	36700	39700	42700	45700	48700
480	37050	40050	43050	46050	49050
490	37400	40400	43400	46400	49400
500	37750	40750	43750	46750	49750
510	38100	41100	44100	47100	50100
520	38450	41450	44450	47450	50450
530	38800	41800	44800	47800	50800
540	39150	42150	45150	48150	51150
550	39500	42500	45500	48500	51500
560	39850	42850	45850	48850	51850
570	40200	43200	46200	49200	52200
580	40550	43550	46550	49550	52550
590	40900	43900	46900	49900	52900
600	41250	44250	47250	50250	53250
610	41600	44600	47600	50600	53600
620	41950	44950	47950	50950	53950
630	42300	45300	48300	51300	54300
640	42650	45650	48650	51650	54650
650	43000	46000	49000	52000	55000
660	43350	46350	49350	52350	55350
670	43700	46700	49700	52700	55700
680	44050	47050	50050	53050	56050
690	44400	47400	50400	53400	56400
700	44750	47750	50750	53750	56750
710	45100	48100	51100	54100	57100
720	45450	48450	51450	54450	57450
730	45800	48800	51800	54800	57800
740	46150	49150	52150	55150	58150
750	46500	49500	52500	55500	58500
760	46850	49850	52850	55850	58850
770	47200	50200	53200	56200	59200
780	47550	50550	53550	56550	59550
790	47900	50900	53900	56900	59900
800	48250	51250	54250	57250	60250
810	48600	51600	54600	57600	60600
820	48950	51950	54950	57950	60950
830	49300	52300	55300	58300	61300
840	49650	52650	55650	58650	61650
850	50000	53000	56000	59000	62000
860	50350	53350	56350	59350	62350
870	50770	53770	56770	59770	62770
880	51190	54190	57190	60190	63190
890	51610	54610	57610	60610	63610
900	52030	55030	58030	61030	64030
910	52450	55450	58450	61450	64450
920	52870	55870	58870	61870	64870
930	53290	56290	59290	62290	65290
940	53710	56710	59710	62710	65710
950	54130	57130	60130	63130	66130
960	54550	57550	60550	63550	66550
970	54970	57970	60970	63970	66970
980	55390	58390	61390	64390	67390
990	55810	58810	61810	64810	67810
1000	56230	59230	62230	65230	68230
1010	56650	59650	62650	65650	68650
1020	57070	60070	63070	66070	69070
1030	57490	60490	63490	66490	69490
1040	57910	60910	63910	66910	69910
1050	58330	61330	64330	67330	70330
1060	58750	61750	64750	67750	70750
1070	59170	62170	65170	68170	71170
1080	59590	62590	65590	68590	71590
1090	60010	63010	66010	69010	72010
1100	60430	63430	66430	69430	72430
1110	60850	63850	66850	69850	72850
1120	61270	64270	67270	70270	73270
1130	61690	64690	67690	70690	73690
1140	62110	65110	68110	71110	74110
1150	62530	65530	68530	71530	74530
1160	62950	65950	68950	71950	74950
1170	63370	66370	69370	72370	75370
1180	63790	66790	69790	72790	75790
1190	64030	67030	70030	73030	76030
1200	64270	67270	70270	73270	76270
1210	64510	67510	70510	73510	76510
1220	64750	67750	70750	73750	76750
1230	64990	67990	70990	73990	76990
1240	65230	68230	71230	74230	77230
1250	65470	68470	71470	74470	77470
1260	65710	68710	71710	74710	77710
1270	65950	68950	71950	74950	77950
1280	66190	69190	72190	75190	78190
1290	66430	69430	72430	75430	78430
1300	66670	69670	72670	75670	78670
1310	66910	69910	72910	75910	78910
1320	67150	70150	73150	76150	79150
1330	67390	70390	73390	76390	79390
1340	67630	70630	73630	76630	79630
1350	67870	70870	73870	76870	79870
1360	68110	71110	74110	77110	80110
1370	68350	71350	74350	77350	80350
1380	68590	71590	74590	77590	80590
1390	68830	71830	74830	77830	80830
1400	69070	72070	75070	78070	81070
1410	69310	72310	75310	78310	81310
1420	69550	72550	75550	78550	81550
1430	69790	72790	75790	78790	81790
1440	70030	73030	76030	79030	82030
1450	70270	73270	76270	79270	82270
1460	70510	73510	76510	79510	82510
1470	70750	73750	76750	79750	82750
1480	70990	73990	76990	79990	82990
1490	71230	74230	77230	80230	83230
1500	71470	74470	77470	80470	83470
1510	71710	74710	77710	80710	83710
1520	71950	74950	77950	80950	83950
1530	72190	75190	78190	81190	84190
1540	72430	75430	78430	81430	84430
1550	72670	75670	78670	81670	84670
1560	72910	75910	78910	81910	84910
1570	73150	76150	79150	82150	85150
1580	73390	76390	79390	82390	85390
1590	73590	76590	79590	82590	85590
1600	73790	76790	79790	82790	85790
1610	73990	76990	79990	82990	85990
1620	74190	77190	80190	83190	86190
1630	74390	77390	80390	83390	86390
1640	74590	77590	80590	83590	86590
1650	74790	77790	80790	83790	86790
1660	74990	77990	80990	83990	86990
1670	75190	78190	81190	84190	87190
1680	75390	78390	81390	84390	87390
1690	75590	78590	81590	84590	87590
1700	75790	78790	81790	84790	87790
1710	75990	78990	81990	84990	87990
1720	76190	79190	82190	85190	88190
1730	76390	79390	82390	85390	88390
1740	76590	79590	82590	85590	88590
1750	76790	79790	82790	85790	88790
1760	76990	79990	82990	85990	88990
1770	77190	80190	83190	86190	89190
1780	77390	80390	83390	86390	89390
1790	77590	80590	83590	86590	89590
1800	77790	80790	83790	86790	89790
1810	77990	80990	83990	86990	89990
1820	78190	81190	84190	87190	90190
1830	78390	81390	84390	87390	90390
1840	78590	81590	84590	87590	90590
1850	78790	81790	84790	87790	90790
1860	78990	81990	84990	87990	90990
1870	79190	82190	85190	88190	91190
1880	79390	82390	85390	88390	91390
1890	79570	82570	85570	88570	91570
1900	79750	82750	85750	88750	91750
1910	79930	82930	85930	88930	91930
1920	80110	83110	86110	89110	92110
1930	80290	83290	86290	89290	92290
1940	80470	83470	86470	89470	92470
1950	80650	83650	86650	89650	92650
1960	80830	83830	86830	89830	92830
1970	81010	84010	87010	90010	93010
1980	81190	84190	87190	90190	93190
1990	81370	84370	87370	90370	93370
2000	81550	84550	87550	90550	93550
2010	81730	84730	87730	90730	93730
2020	81910	84910	87910	90910	93910
2030	82090	85090	88090	91090	94090
2040	82270	85270	88270	91270	94270
2050	82450	85450	88450	91450	94450
2060	82630	85630	88630	91630	94630
2070	82810	85810	88810	91810	94810
2080	82990	85990	88990	91990	94990
2090	83170	86170	89170	92170	95170
2100	83350	86350	89350	92350	95350
2110	83530	86530	89530	92530	95530
2120	83710	86710	89710	92710	95710
2130	83890	86890	89890	92890	95890
2140	84070	87070	90070	93070	96070
2150	84250	87250	90250	93250	96250
2160	84430	87430	90430	93430	96430
2170	84610	87610	90610	93610	96610
2180	84790	87790	90790	93790	96790
2190	84970	87970	90970	93970	96970
2200	85150	88150	91150	94150	97150
2210	85330	88330	91330	94330	97330
2220	85510	88510	91510	94510	97510
2230	85690	88690	91690	94690	97690
2240	85870	88870	91870	94870	97870
2250	86050	89050	92050	95050	98050
2260	86230	89230	92230	95230	98230
2270	86410	89410	92410	95410	98410
2280	86590	89590	92590	95590	98590
2290	86770	89770	92770	95770	98770
2300	86950	89950	92950	95950	98950
2310	87130	90130	93130	96130	99130
2320	87310	90310	93310	96310	99310
2330	87490	90490	93490	96490	99490
2340	87670	90670	93670	96670	99670
2350	87850	90850	93850	96850	99850
2360	88030	91030	94030	97030	100030
2370	88210	91210	94210	97210	100210
2380	88390	91390	94390	97390	100390
2390	88570	91570	94570	97570	100570
2400	88750	91750	94750	97750	100750
2410	88930	91930	94930	97930	100930
2420	89110	92110	95110	98110	101110
2430	89290	92290	95290	98290	101290
2440	89470	92470	95470	98470	101470
2450	89650	92650	95650	98650	101650
2460	89830	92830	95830	98830	101830
2470	90010	93010	96010	99010	102010
2480	90190	93190	96190	99190	102190
2490	90370	93370	96370	99370	102370
2500	90550	93550	96550	99550	102550
2510	90730	93730	96730	99730	102730
2520	90910	93910	96910	99910	102910
2530	91090	94090	97090	100090	103090
2540	91270	94270	97270	100270	103270
2550	91450	94450	97450	100450	103450
2560	91630	94630	97630	100630	103630
2570	91810	94810	97810	100810	103810
2580	91990	94990	97990	100990	103990
2590	92170	95170	98170	101170	104170
2600	92350	95350	98350	101350	104350
2610	92530	95530	98530	101530	104530
2620	92710	95710	98710	101710	104710
2630	92890	95890	98890	101890	104890
2640	93070	96070	99070	102070	105070
2650	93250	96250	99250	102250	105250
2660	93430	96430	99430	102430	105430
2670	93610	96610	99610	102610	105610
2680	93790	96790	99790	102790	105790
2690	93970	96970	99970	102970	105970
2700	94150	97150	100150	103150	106150
2710	94330	97330	100330	103330	106330
2720	94510	97510	100510	103510	106510
2730	94690	97690	100690	103690	106690
2740	94870	97870	100870	103870	106870
2750	95050	98050	101050	104050	107050
2760	95230	98230	101230	104230	107230
2770	95410	98410	101410	104410	107410
2780	95590	98590	101590	104590	107590
2790	95770	98770	101770	104770	107770
2800	95950	98950	101950	104950	107950
2810	96130	99130	102130	105130	108130
2820	96310	99310	102310	105310	108310
2830	96490	99490	102490	105490	108490
2840	96670	99670	102670	105670	108670
2850	96850	99850	102850	105850	108850
2860	97030	100030	103030	106030	109030
2870	97210	100210	103210	106210	109210
2880	97390	100390	103390	106390	109390
2890	97570	100570	103570	106570	109570
2900	97570	100570	103570	106570	109570`;

// Parse TSV
function parseTable(tsv: string): Row[] {
  const lines = tsv.trim().split(/\r?\n/);
  const rows: Row[] = [];
  for (let i = 1; i < lines.length; i++) {
    const [limitStr, c1, c2, c3, c4, c5] = lines[i].split(/\t/);
    rows.push({
      limit: Number(limitStr),
      caps: [Number(c1), Number(c2), Number(c3), Number(c4), Number(c5)] as any,
    });
  }
  return rows;
}

const ROWS = parseTable(TABLE_TSV);

// ==== Searches ===============================================================

// Par revenu (première ligne dont cap >= revenu) — pour rentLimitFromIncome
function findRowByIncomeCeil(income: number, col: BaremeColumn): number {
  const idxCol = col - 1;
  let lo = 0, hi = ROWS.length - 1, ans = ROWS.length - 1;
  while (lo <= hi) {
    const mid = (lo + hi) >> 1;
    if (income <= ROWS[mid].caps[idxCol]) { ans = mid; hi = mid - 1; }
    else { lo = mid + 1; }
  }
  return ans;
}

// Par loyer (dernière ligne dont limit <= loyer) — pour computeBareme
function findRowByRentFloor(rent: number): number {
  let lo = 0, hi = ROWS.length - 1, ans = 0;
  while (lo <= hi) {
    const mid = (lo + hi) >> 1;
    if (ROWS[mid].limit <= rent) { ans = mid; lo = mid + 1; }
    else { hi = mid - 1; }
  }
  return ans;
}

// ==== Public API =============================================================

/** Limite unique (CHF) pour un revenu et une colonne donnée. */
export function rentLimitFromIncome(income: number, col: BaremeColumn): number {
  const i = findRowByIncomeCeil(income, col);
  return ROWS[i].limit;
}

/** Toutes les limites (5 colonnes) pour un revenu donné. */
export function allLimitsFromIncome(income: number): Record<BaremeColumn, number> {
  const res = {} as Record<BaremeColumn, number>;
  ([1, 2, 3, 4, 5] as BaremeColumn[]).forEach((col) => {
    res[col] = rentLimitFromIncome(income, col);
  });
  return res;
}

/** Intervalle de RDU couvert par la ligne choisie (utile debug). */
export function incomeRangeForLimit(income: number, col: BaremeColumn): Range {
  const idx = findRowByIncomeCeil(income, col);
  const lo = idx === 0 ? 0 : ROWS[idx - 1].caps[col - 1] + 1;
  const hi = ROWS[idx].caps[col - 1];
  return { min: lo, max: hi };
}

/** 
 * API utilisée par DatesCard : à partir d’un loyer (min) + colonne,
 * renvoie la tranche de loyer et la plage RDU autorisée.
 */
export function computeBareme(rent: number, col: BaremeColumn): {
  label: string;
  rentRange: Range;
  incomeRange: Range;
  incomeCap: number;
  rowIndex: number;
} {
  const idx = findRowByRentFloor(Math.max(0, Math.floor(rent)));
  const row = ROWS[idx];
  const next = ROWS[idx + 1];

  const rentMin = row.limit;
  const rentMax = next ? next.limit - 1 : row.limit; // borne sup ≈ (prochaine limite - 1)

  const cap = row.caps[col - 1];
  const incomeMin = idx === 0 ? 0 : ROWS[idx - 1].caps[col - 1] + 1;
  const incomeMax = cap;

  return {
    label: `Colonne ${col}`,
    rentRange: { min: rentMin, max: rentMax },
    incomeRange: { min: incomeMin, max: incomeMax },
    incomeCap: cap,
    rowIndex: idx,
  };
}

/** Expose la table brute (pour UI/tableau) */
export function listAllRows(): Row[] {
  return ROWS.slice();
}
